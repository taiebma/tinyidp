@page 
@using tinyidp.Business.BusinessEntities
@using tinyidp.Pages.Models
@model CredentialsViewModel
@{
    ViewData["Title"] = "Credentials Managment";
}
<h1>@ViewData["Title"]</h1>
<div id="error">
    <span class="error">
@if (Model._credentialCreate != null && Model._credentialCreate!.ExceptionMessage != null)
{    
    @Model._credentialCreate!.ExceptionMessage
}
    </span>
</div>

@if (Model._credentialCreate != null && Model._credentialCreate!.CanAccess)
{

<a asp-page="./Create" asp-route-id="">Add credential</a>

<h3>List of credentials</h3>
<div id="list" class="shadowlist">
    <form>
    <p>
        <table>
            <tr>
                <td>Ident:</td><td><input type="text" asp-for="SearchIdent" /></td>
                <td><label for="State">State</label></td>
                <td><select asp-for="SearchState" asp-items="Html.GetEnumSelectList<StateCredential>()">
                    <option value="">Choose a State</option>
                    </select></td>
                <td><input type="submit" value="Filter" /></td>
            </tr>
        </table>
    </p>
    </form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].Ident)
            </th>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].RoleIdent)
            </th>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].State)
            </th>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].NbMaxRenew)
            </th>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].TokenMaxMinuteValidity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model._credentialView[0].RefreshMaxMinuteValidity)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model._credentialView) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Ident)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RoleIdent)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.State)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NbMaxRenew)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TokenMaxMinuteValidity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RefreshMaxMinuteValidity)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
</div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}